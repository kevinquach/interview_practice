var search_data = {"index":{"searchIndex":["account","anagram","array","enumerable","fakeenumerable","fakeenumerator","fibonaccicalculator","unknownmethoderror","object","person","procexample","sortedlist","transaction","vowelfinder","<<()","<=>()","array()","calculate()","each()","each()","each()","factorial_inject()","factorial_iterative()","factorial_recursive()","factorial_reduce()","factorial_tail_recursive()","find()","is_anagram?()","iter_palindrome()","iteration()","letters_of()","map()","map()","mappy()","matrix()","my_sort_by()","new()","new()","new()","new()","new()","new()","new()","new()","next()","palindrome()","pass_in_block()","reduce()","rewind()","select()","selecty()","sequence()","sort_by()","to_s()","transfer()","use_proc()","with_index()","binary_converter.py"],"longSearchIndex":["account","anagram","array","enumerable","fakeenumerable","fakeenumerator","fibonaccicalculator","fibonaccicalculator::unknownmethoderror","object","person","procexample","sortedlist","transaction","vowelfinder","sortedlist#<<()","person#<=>()","object#array()","fibonaccicalculator#calculate()","fakeenumerator#each()","sortedlist#each()","vowelfinder#each()","object#factorial_inject()","object#factorial_iterative()","object#factorial_recursive()","object#factorial_reduce()","object#factorial_tail_recursive()","array#find()","anagram#is_anagram?()","object#iter_palindrome()","object#iteration()","anagram#letters_of()","enumerable#map()","fakeenumerable#map()","array#mappy()","object#matrix()","enumerable#my_sort_by()","account::new()","anagram::new()","fakeenumerator::new()","fibonaccicalculator::new()","person::new()","sortedlist::new()","transaction::new()","vowelfinder::new()","fakeenumerator#next()","object#palindrome()","procexample#pass_in_block()","fakeenumerable#reduce()","fakeenumerator#rewind()","fakeenumerable#select()","array#selecty()","fibonaccicalculator#sequence()","fakeenumerable#sort_by()","person#to_s()","transaction#transfer()","procexample#use_proc()","fakeenumerator#with_index()",""],"info":[["Account","","Account.html","",""],["Anagram","","Anagram.html","",""],["Array","","Array.html","",""],["Enumerable","","Enumerable.html","",""],["FakeEnumerable","","FakeEnumerable.html","",""],["FakeEnumerator","","FakeEnumerator.html","",""],["FibonacciCalculator","","FibonacciCalculator.html","","<p>Fibonacci Sequence\n\n<pre>0, 1, 2, 3, 4, 5, 6,  7,  8,  9, 10\nv  v  v  v  v  v  v   v   v   v   v\n0, 1, 1, 2, ...</pre>\n"],["FibonacciCalculator::UnknownMethodError","","FibonacciCalculator/UnknownMethodError.html","",""],["Object","","Object.html","",""],["Person","","Person.html","",""],["ProcExample","","ProcExample.html","",""],["SortedList","","SortedList.html","",""],["Transaction","","Transaction.html","",""],["VowelFinder","","VowelFinder.html","",""],["<<","SortedList","SortedList.html#method-i-3C-3C","(new_element)",""],["<=>","Person","Person.html#method-i-3C-3D-3E","(other)",""],["array","Object","Object.html#method-i-array","(num)",""],["calculate","FibonacciCalculator","FibonacciCalculator.html#method-i-calculate","(value)",""],["each","FakeEnumerator","FakeEnumerator.html#method-i-each","(&block)",""],["each","SortedList","SortedList.html#method-i-each","()",""],["each","VowelFinder","VowelFinder.html#method-i-each","()",""],["factorial_inject","Object","Object.html#method-i-factorial_inject","(n)","<p>Iterative with Range#inject\n"],["factorial_iterative","Object","Object.html#method-i-factorial_iterative","(n)","<p>Iterative with Range#each\n"],["factorial_recursive","Object","Object.html#method-i-factorial_recursive","(n)","<p>Recursive\n"],["factorial_reduce","Object","Object.html#method-i-factorial_reduce","(n)","<p>Iterative with Range#reduce, requires Ruby 1.8.7\n"],["factorial_tail_recursive","Object","Object.html#method-i-factorial_tail_recursive","(n, prod = 1)","<p>Tail-recursive\n"],["find","Array","Array.html#method-i-find","()",""],["is_anagram?","Anagram","Anagram.html#method-i-is_anagram-3F","(text)","<p>Test to see if a new word contains the same letters as the original\n"],["iter_palindrome","Object","Object.html#method-i-iter_palindrome","(str)",""],["iteration","Object","Object.html#method-i-iteration","(num)",""],["letters_of","Anagram","Anagram.html#method-i-letters_of","(text)","<p>Determine the letters in a word or phrase\n<p>all letters are converted to lower case\n<p>anything not a letter â€¦\n"],["map","Enumerable","Enumerable.html#method-i-map","()",""],["map","FakeEnumerable","FakeEnumerable.html#method-i-map","()",""],["mappy","Array","Array.html#method-i-mappy","()",""],["matrix","Object","Object.html#method-i-matrix","(num)",""],["my_sort_by","Enumerable","Enumerable.html#method-i-my_sort_by","()",""],["new","Account","Account.html#method-c-new","(balance)",""],["new","Anagram","Anagram.html#method-c-new","(text)","<p>Remember the letters in the initial word\n"],["new","FakeEnumerator","FakeEnumerator.html#method-c-new","(target, iter)",""],["new","FibonacciCalculator","FibonacciCalculator.html#method-c-new","(method = :matrix)",""],["new","Person","Person.html#method-c-new","(name)",""],["new","SortedList","SortedList.html#method-c-new","()",""],["new","Transaction","Transaction.html#method-c-new","(account_a, account_b)",""],["new","VowelFinder","VowelFinder.html#method-c-new","(string)",""],["next","FakeEnumerator","FakeEnumerator.html#method-i-next","()",""],["palindrome","Object","Object.html#method-i-palindrome","(word)",""],["pass_in_block","ProcExample","ProcExample.html#method-i-pass_in_block","(&action)",""],["reduce","FakeEnumerable","FakeEnumerable.html#method-i-reduce","(operation_or_value=nil)",""],["rewind","FakeEnumerator","FakeEnumerator.html#method-i-rewind","()",""],["select","FakeEnumerable","FakeEnumerable.html#method-i-select","()",""],["selecty","Array","Array.html#method-i-selecty","()",""],["sequence","FibonacciCalculator","FibonacciCalculator.html#method-i-sequence","(count)",""],["sort_by","FakeEnumerable","FakeEnumerable.html#method-i-sort_by","()",""],["to_s","Person","Person.html#method-i-to_s","()",""],["transfer","Transaction","Transaction.html#method-i-transfer","(amount)",""],["use_proc","ProcExample","ProcExample.html#method-i-use_proc","(parameter)",""],["with_index","FakeEnumerator","FakeEnumerator.html#method-i-with_index","()",""],["binary_converter.py","","binary_converter_py.html","","<p>num = -398748912498\n<p>if num &lt; 0:\n\n<pre>isNeg = True\nnum = abs(num)</pre>\n"]]}}